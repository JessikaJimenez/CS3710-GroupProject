#########################################################################
# Start of program, sets up Capman game then proceeds with infinite loop
#
# %r1 - Capman State (1 is Capman is alive, 0 if Capman is dead)
# %r2 - Capman X Position (Cannot exceed 640)
# %r3 - Capman Y Position (Cannot exceed 480)
# %r4 - Capman Direction (0 = neutral, 1 = Down, 2 = Right, 3 = Left, 4 = Up, -1 = A)
# %r5 - Ghost X Position (Cannot exceed 640)
# %r6 - Ghost Y Position (Cannot exceed 480)
# %r7 - Ghost Direction (1 = Down, 2 = Right, 3 = Left, 4 = Up)
.START # START OF GAME

MOVI %r1 $1 # r1 = 1 (alive)

# Capman starts at (320, 368) which is the top left of his sprite
MOVI %r2 $80 # r2 = 80
ASHUI %r2 $2 # r2 = 320 (Capman xPos)
MOVI %r3 $92 # r3 = 92
ASHUI %r3 $2 # r3 = 368 (Capman yPos)

MOVI %r4 $3 # r4 = Left (Capman Direction)

# Ghost starts at (304, 16) which is the top left of his sprite
MOVI %r5 $76 # r5 = 76
ASHUI %r5 $2 # r5 = 304 (xPosOnGhost)
MOVI %r6 $16 # r6 = 16 (yPosOnGhost)

MOVI %r7 $2 # r7 = Right (Ghost Direction)

# Store starting information into memory
JPT %r15 .STOREDRAWINGINFORMATION # Store address of .STOREDRAWINGINFORMATION in r15
JAL %r0 %r15 # CALL .STOREDRAWINGINFORMATION (returns %r15 as 1C35)
ADDI %r15 $1 # r15 = 1C36
MOVI %r8 $69 # r8 = 69
MULI %r8 $6 # r8 *= 6 (r8 = 414)
STOR %r8 %r15 # Store Pacdot Count (414) into r15(1C36)
ADDI %r15 $1 # r15 = 1C37
.PACDOTLOOP
LOAD %r14 %r15 # Load r14 (address of pacdot) from r15 (pacdots array index)
STOR %r13 %r14 # Store the pacdot sprite ID (1) into the sprite block (r14)
ADDI %r15 $1 # r15 += 1
SUBI %r8 $1 # r8 -= 1 (Decrement pacdot count)
CMPI %r8 $0
BEQ .CHECKDIRECTION # Branch if there are no more pacdots to fill
BUC .PACDOTLOOP
#######################################################################
# Infinite loop for game
.CHECKDIRECTION # Start of infinite loop for game, updates Capman based on direction pressed
MOVI %r15 $-1 # r15 = 00FF
LUI %r15 $-1 # r15 = FFFF
LOAD %r8 %r15 # Load user input into %r8
CMPI %r8 $0 
BLE $1 # If r4 greater than 0, execute next instruction which will overwrite capman's direction
MOV %r4 %r8 # r4 = r8
CMPI %r4 $1
JPT %r15 .CAPMANDOWN # r15 = .CAPMANDOWN address
JEQ %r15 # Jump if Capman is going down
CMPI %r4 $2
JPT %r15 .CAPMANRIGHT # r15 = .CAPMANRIGHT address
JEQ %r15 # Jump if Capman is going right
CMPI %r4 $3
JPT %r15 .CAPMANLEFT # r15 = .CAPMANLEFT address
JEQ %r15 # Jump if Capman is going left
CMPI %r4 $4
JPT %r15 .CAPMANUP # r15 = .CAPMANUP address
JEQ %r15 # Jump if Capman is going up

.UPDATEGAME # Label for updating game, %r11 and %r12 are updated as Capman's position on grid

# Check for pacdot collision
JPT %r15 .CHECKDOTCOLLISION # r15 = .CHECKDOTCOLLISION address
JAL %r0 %r15 # CALL .CHECKDOTCOLLISION (Returns %r10 as number of pacdots left)
JPT %r15 .ENDGAME # r15 = .ENDGAME address
CMPI %r10 $0
JEQ %r15 # Jump to .ENDGAME if all pacdots are collected

# Update ghost position based on its current direction
# A ghost will turn at forks loosely based on player input
.UPDATEGHOSTBEGIN
MOVI %r8 $0 # r8 = 0 (This will be used to avoid infinite loop with ghost)
JPT %r15 .PICKDIRECTION # r15 = .PICKDIRECTION address
JUC %r15 # Pick a new direction for ghost if it isn't chasing capman
.UPDATEGHOSTCONTINUE
CMPI %r7 $1
JPT %r15 .GHOSTDOWN # r15 = .GHOSTDOWN address
JEQ %r15 # Jump to .GHOSTDOWN if ghost is going down
CMPI %r7 $2
JPT %r15 .GHOSTRIGHT # r15 = .GHOSTRIGHT address
JEQ %r15 # Jump to .GHOSTRIGHT if ghost is going right
CMPI %r7 $3
JPT %r15 .GHOSTLEFT # r15 = .GHOSTLEFT address
JEQ %r15 # Jump to .GHOSTLEFT if ghost is going left
CMPI %r7 $4
JPT %r15 .GHOSTUP # r15 = .GHOSTUP address
JEQ %r15 # Jump to .GHOSTUP if ghost is going up

# Check if Capman has died
.CAPMANSTATE
JPT %r15 .CHECKGHOSTCOLLISION # r15 = .CHECKGHOSTCOLLISION address
JAL %r0 %r15 # Call .CHECKGHOSTCOLLISION (Will update r1 if characters hit each other)

# Store necessary drawing information
JPT %r15 .STOREDRAWINGINFORMATION # r15 = .STOREDRAWINGINFORMATION address
JAL %r0 %r15 # CALL .STOREDRAWINGINFORMATION
JPT %r15 .ENDGAME # r15 = .ENDGAME address
CMPI %r1 $0
JEQ %r15 # Jump to .ENDGAME if Capman is dead
BUC .CHECKDIRECTION # Loop back to beginning
###########################################################################
# Function for character going the left direction
# Goes left if there are no collisions present
# If a character reaches the edge of the screen, they will come out the other end
.CAPMANLEFT
SUBI %r2 $1 # xPos -= 1
CMPI %r2 $0
BGE .LEFTCONVERSION # Execute next few instruction if we need to loop
MOVI %r15 $64 # r15 = 64
MULI %r15 $10 # r15 *= 10 (r15 = 640)
ADD %r2 %r15 # xPos += 640
.LEFTCONVERSION
JPT %r15 .CONVERTCAPMAN # r15 = .CONVERTCAPMAN address
JAL %r0 %r15 # CALL .CONVERTCAPMAN (Returns %r11 and %r12 as positions on grid)

# When Capman goes left, Capman's yPos will be divisible by 16
# If it isn't divisible by 16, Capman can't go left so no need for collision checking
MOV %r10 %r3 # r10 = yPos
MOVI %r13 $15 # r13 = 000F
AND %r10 %r13 # r10 & r13 (r10 = Last 4 bits of yPos) 
CMPI %r10 $0
BNE $4 # Branch if yPos is not divisible by 6
JPT %r15 .CHECKWALLCOLLISION # r15 = .CHECKWALLCOLLISION address
JAL %r0 %r15 # CALL .CHECKWALLCOLLISION (Returns %r10 as collision detection)
CMPI %r10 $0
BEQ .UPDATEGAME # Branches if capman does not collide
ADDI %r2 $1 # Redo position update
BUC .UPDATEGAME
###############################################################################3
# Function for when the player holds the right direction
# Capman will go right only if there are no collisions present
# If Capman reaches the edge of the screen, he will come out the other end
.CAPMANRIGHT
ADDI %r2 $1 # xPos += 1
MOVI %r15 $64 # r15 = 64
MULI %r15 $10 # r15 *= 10 (r15 = 640)
CMP %r2 %r15
BLT .RIGHTCONVERSION # Execute next instruction if we need to loop
SUB %r2 %r15 # xPos -= 640
.RIGHTCONVERSION
JPT %r15 .CONVERTCAPMAN # r15 = .CONVERTCAPMAN address
JAL %r0 %r15 # CALL .CONVERTCAPMAN (Returns %r11 and %r12 as positions on grid)

# When Capman goes right, Capman's yPos will be divisible by 16
# If it isn't divisible by 16, Capman can't go right so no need for collision checking
MOV %r10 %r3 # r10 = yPos
MOVI %r13 $15 # r13 = 000F
AND %r10 %r13 # r10 & r13 (r10 = Last 4 bits of yPos) 
CMPI %r10 $0
BNE $4 # Branch if yPos is not divisible by 6
JPT %r15 .CHECKWALLCOLLISION # r15 = .CHECKWALLCOLLISION address
JAL %r0 %r15 # CALL .CHECKWALLCOLLISION (Returns %r10 as collision detection)
CMPI %r10 $0
BEQ .UPDATEGAME # Branches if capman does not collide
SUBI %r2 $1 # Redo position update
BUC .UPDATEGAME
##################################################################################
# Function for when the player holds the up direction
# Capman will go up only if there are no collisions present
.CAPMANUP
SUBI %r3 $1 # yPos -= 1
JPT %r15 .CONVERTCAPMAN # r15 = .CONVERTCAPMAN address
JAL %r0 %r15 # CALL .CONVERTCAPMAN (Returns %r11 and %r12 as positions on grid)

# When Capman goes up, Capman's xPos will be divisible by 16
# If it isn't divisible by 16, Capman can't go up so no need for collision checking
MOV %r10 %r2 # r10 = xPos
MOVI %r13 $15 # r13 = 000F
AND %r10 %r13 # r10 & r13 (r10 = Last 4 bits of xPos) 
CMPI %r10 $0
BNE $4 # Branch if xPos is not divisible by 6
JPT %r15 .CHECKWALLCOLLISION # r15 = .CHECKWALLCOLLISION address
JAL %r0 %r15 # CALL .CHECKWALLCOLLISION (Returns %r10 as collision detection)
CMPI %r10 $0
BEQ .UPDATEGAME # Branches if capman does not collide
ADDI %r3 $1 # Redo position update
BUC .UPDATEGAME
################################################################################
# Function for when the player holds the down direction
# Capman will go down only if there are no collisions present
.CAPMANDOWN
ADDI %r3 $1 # yPos += 1
JPT %r15 .CONVERTCAPMAN # r15 = .CONVERTCAPMAN address
JAL %r0 %r15 # CALL .CONVERTCAPMAN (Returns %r11 and %r12 as positions on grid)

# When Capman goes down, Capman's xPos will be divisible by 16
# If it isn't divisible by 16, Capman can't go down so no need for collision checking
MOV %r10 %r2 # r10 = xPos
MOVI %r13 $15 # r13 = 000F
AND %r10 %r13 # r10 & r13 (r10 = Last 4 bits of xPos) 
CMPI %r10 $0
BNE $4 # Branch if xPos is not divisible by 6
JPT %r15 .CHECKWALLCOLLISION # r15 = .CHECKWALLCOLLISION address
JAL %r0 %r15 # CALL .CHECKWALLCOLLISION (Returns %r10 as collision detection)
CMPI %r10 $0
BEQ .UPDATEGAME # Branches if capman does not collide
SUBI %r3 $1 # Redo position update
BUC .UPDATEGAME
###################################################################################
# Function for when the ghost goes left
# The ghost will go left only if there are no collisions present
# Otherwise, it picks a new direction
.GHOSTLEFT
SUBI %r5 $2 # xPosOnGhost -= 2
CMPI %r5 $0
BGE .LEFTCONVERSIONGHOST # Execute next few instruction if we need to loop
MOVI %r15 $64 # r15 = 64
MULI %r15 $10 # r15 *= 10 (r15 = 640)
ADD %r5 %r15 # xPosOnGhost += 640
.LEFTCONVERSIONGHOST
JPT %r15 .CONVERTGHOST # r15 = .CONVERTGHOST address
JAL %r0 %r15 # CALL .CONVERTGHOST (Returns %r11 and %r12 as positions on grid)
JPT %r15 .CHECKWALLCOLLISION # r15 = .CHECKWALLCOLLISION address
JAL %r0 %r15 # CALL .CHECKWALLCOLLISION (Returns %r10 as collision detection)
CMPI %r10 $0
JPT %r15 .CAPMANSTATE # r15 = .CAPMANSTATE address
JEQ %r15 # Jump if ghost does not collide
ADDI %r5 $2 # Redo position update

# Need to pick new direction, either up or down
JPT %r15 .UPORDOWN # r15 = .UPORDOWN address
JUC %r15 # Change direction to up or down
###################################################################################
# Function for when the ghost goes right
# The ghost will go right only if there are no collisions present
# Otherwise, it picks a new direction
.GHOSTRIGHT
ADDI %r5 $2 # xPosOnGhost += 2
MOVI %r15 $64 # r15 = 64
MULI %r15 $10 # r15 *= 10 (r15 = 640)
CMP %r5 %r15
BLT .RIGHTCONVERSION # Execute next instruction if we need to loop
SUB %r5 %r15 # xPosOnGhost -= 640
.RIGHTCONVERSIONGHOST
JPT %r15 .CONVERTGHOST # r15 = .CONVERTGHOST address
JAL %r0 %r15 # CALL .CONVERTGHOST (Returns %r11 and %r12 as positions on grid)
JPT %r15 .CHECKWALLCOLLISION # r15 = .CHECKWALLCOLLISION address
JAL %r0 %r15 # CALL .CHECKWALLCOLLISION (Returns %r10 as collision detection)
CMPI %r10 $0
JPT %r15 .CAPMANSTATE # r15 = .CAPMANSTATE address
JEQ %r15 # Jump if ghost does not collide
SUBI %r5 $2 # Redo position update

# Need to pick new direction, either up or down
JPT %r15 .UPORDOWN # r15 = .UPORDOWN address
JUC %r15 # Change direction to up or down
##################################################################################
# Function for when the ghost goes up
# The ghost will go up only if there are no collisions present
# Otherwise, it picks a new direction
.GHOSTUP
SUBI %r6 $2 # yPosOnGhost -= 2
JPT %r15 .CONVERTGHOST # r15 = .CONVERTGHOST address
JAL %r0 %r15 # CALL .CONVERTGHOST (Returns %r11 and %r12 as positions on grid)
JPT %r15 .CHECKWALLCOLLISION # r15 = .CHECKWALLCOLLISION address
JAL %r0 %r15 # CALL .CHECKWALLCOLLISION (Returns %r10 as collision detection)
CMPI %r10 $0
JPT %r15 .CAPMANSTATE # r15 = .CAPMANSTATE address
JEQ %r15 # Jump if ghost does not collide
ADDI %r6 $2 # Redo position update

# Need to pick new direction, either left or right
JPT %r15 .LEFTORRIGHT # r15 = .LEFTORRIGHT address
JUC %r15 # Change direction to left or right
###################################################################################
# Function for when the ghost goes down
# The ghost will go down only if there are no collisions present
# Otherwise, it picks a new direction
.GHOSTDOWN
ADDI %r6 $2 # yPosOnGhost += 2
JPT %r15 .CONVERTGHOST # r15 = .CONVERTGHOST address
JAL %r0 %r15 # CALL .CONVERTGHOST (Returns %r11 and %r12 as positions on grid)
JPT %r15 .CHECKWALLCOLLISION # r15 = .CHECKWALLCOLLISION address
JAL %r0 %r15 # CALL .CHECKWALLCOLLISION (Returns %r10 as collision detection)
CMPI %r10 $0
JPT %r15 .CAPMANSTATE # r15 = .CAPMANSTATE address
JEQ %r15 # Jump if ghost does not collide
SUBI %r6 $2 # Redo position update

# Need to pick new direction, either left or right
JPT %r15 .LEFTORRIGHT # r15 = .LEFTORRIGHT address
JUC %r15 # Change direction to left or right
###################################################################################
# This function will pick a new direction for the ghost if it can
.PICKDIRECTION
# Check which direction the ghost is going
CMP %r7 %r4
JPT %r15 .UPDATEGHOSTCONTINUE # r15 = .UPDATEGHOSTCONTINUE address
JEQ %r15 # Keep going if both are going same direction (chasing)

.NEWDIRECTION
CMPI %r7 $1
BEQ .GOINGVERTICAL
CMPI %r7 $4
BEQ .GOINGVERTICAL
CMPI %r7 $2
BEQ .GOINGHORIZONTAL
CMPI %r7 $3
BEQ .GOINGHORIZONTAL

# When going vertical, only change direction if valid
# This is when the yPosOnGhost is divisible by 16
.GOINGVERTICAL
MOV %r10 %r6 # r10 = yPosOnGhost
MOVI %r13 $15 # r13 = 000F
AND %r10 %r13 # r10 & r13 (r10 = Last 4 bits of yPosOnGhost) 
CMPI %r10 $0
BEQ .LEFTORRIGHT
BUC .KEEPGOING

# When going horizontal, only change direction if valid
# This is when the xPosOnGhost is divisible by 16
.GOINGHORIZONTAL
MOV %r10 %r5 # r10 = xPosOnGhost
MOVI %r13 $15 # r13 = 000F
AND %r10 %r13 # r10 & r13 (r10 = Last 4 bits of xPosOnGhost) 
CMPI %r10 $0
BEQ .UPORDOWN
BUC .KEEPGOING

.LEFTORRIGHT
CMPI %r8 $0
BNE .FAILSAFE # Branches if this isn't the first time a new direction has been selected
MOV %r8 %r7 # Store original direction
MOVI %r7 $2 # Make ghost go right
CMPI %r4 $3
BLT $1
MOVI %r7 $3 # Make ghost go left
BUC .KEEPGOING

.UPORDOWN
CMPI %r8 $0
BNE .FAILSAFE # Branches if this isn't the first time a new direction has been selected
MOV %r8 %r7 # Store original direction
MOVI %r7 $1 # Make ghost go down
CMPI %r4 $3
BLT $1
MOVI %r7 $4 # Make ghost go up
BUC .KEEPGOING

# This is if the ghost may potentially be stuck in an infinite loop
.FAILSAFE
CMPI %r8 $1
BNE $3 # Branches if original direction wasn't down
MOV %r8 %r7 # Will either be left or right now
MOVI %r7 $4 # Make the ghost go up instead
BUC .KEEPGOING
CMPI %r8 $2
BNE $3 # Branches if original direction wasn't right
MOV %r8 %r7 # Will either be up or down now
MOVI %r7 $3 # Make the ghost go left instead
BUC .KEEPGOING
CMPI %r8 $3
BNE $3 # Branches if original direction wasn't left
MOV %r8 %r7 # Will either be up or down now
MOVI %r7 $2 # Make the ghost go right instead
BUC .KEEPGOING
CMPI %r8 $4
BNE $3 # Branches if original direction wasn't left
MOV %r8 %r7 # Will either be left or right now
MOVI %r7 $1 # Make the ghost go down instead
BUC .KEEPGOING

.KEEPGOING
JPT %r15 .UPDATEGHOSTCONTINUE # r15 = .UPDATEGHOSTCONTINUE address
JUC %r15 # Try out a direction selected
###################################################################################
# This function converts the xPos and yPos of Capman to positions on a 40x30 grid
# Will update %r11 and %r12 to the positions on the grid
# 
# RETURNS
# %r11 as the xPosOnGrid
# %r12 as the yPosOnGrid
.CONVERTCAPMAN
MOV %r13 %r2 # r13 = xPos
MOV %r14 %r3 # r14 = yPos
CMPI %r4 $3
BGE .CONTINUECAPMANCONVERSION # Branch if direction is left or up, otherwise focus point must be on bottom right of sprite
ADDI %r13 $16 # r13 += 16
ADDI %r14 $16 # r14 += 16
.CONTINUECAPMANCONVERSION
MOV %r11 %r13 # r11 = xPos (top left or bottom right)
ASHUI %r11 $-4 # r11 /= 16
MOV %r12 %r14 # r12 = yPos (top left or bottom right)
ASHUI %r12 $-4 # r12 /= 16
JUC %r0
#####################################################################################
# This function converts the xPos and yPos of the ghost to positions on a 40x30 grid
# Will update %r11 and %r12 to the positions on the grid
#
# RETURNS
# %r11 as the xPosOnGrid
# %r12 as the yPosOnGrid
.CONVERTGHOST
MOV %r13 %r5 # r13 = xPosOnGhost
MOV %r14 %r6 # r14 = yPosOnGhost
CMPI %r7 $3
BGE .CONTINUEGHOSTCONVERSION # Branch if direction is left or up, otherwise focus point must be on bottom right of sprite
ADDI %r13 $16 # r13 += 16
ADDI %r14 $16 # r14 += 16
.CONTINUEGHOSTCONVERSION
MOV %r11 %r13 # r11 = xPosOnGhost (top left or bottom right)
ASHUI %r11 $-4 # r11 /= 16
MOV %r12 %r14 # r12 = yPosOnGhost (top left or bottom right)
ASHUI %r12 $-4 # r12 /= 16
JUC %r0
####################################################################################
# This function will check for a collision with a wall
# Uses %r11 and %r12 for positions on the grid
# 
# RETURNS
# %r10 - 1 if collides, 0 if not
.CHECKWALLCOLLISION
# Need to store the return address for the end of the function
MOVI %r14 $-1 # r14 = 00FF
LUI %r14 $15 # r14 = 0FFF
STOR %r0 %r14 # Store last return address in memory

# Assume that capman does not collide
MOVI %r10 $0 # r10 = 0

# Get the sprite ID on the grid
JPT %r15 .GETSPRITEID # r15 = .GETSPRITEID address
JAL %r0 %r15 # CALL .GETSPRITEID (Returns %r13 as sprite ID, won't use %r14)
CMPI %r13 $1
BLE .CHECKEDFORWALL # Branches if the block on grid isn't a wall
MOVI %r10 $1 # r10 = 1 (Player collides)
.CHECKEDFORWALL

# Return address was overwritten, get it back from memory
MOVI %r14 $-1 # r14 = 00FF
LUI %r14 $15 # r14 = 0FFF
LOAD %r0 %r14 # Load last return address from memory
JUC %r0
####################################################################################
# This function will check for a pacdot collision
# If collides, removes pacdot from game and decrements counter
# Uses %r11 and %r12 for positions on the grid
#
# RETURNS
# %r10 - Number of pacdots left in the game
.CHECKDOTCOLLISION
# Need to store the return address for the end of the function
MOVI %r14 $-1 # r14 = 00FF
LUI %r14 $15 # r14 = 0FFF
STOR %r0 %r14 # Store last return address in memory

# Before checking memory, see if capman is potentially on top of a pacdot
# If Capman is going horizontal, his xPos must be halfway through the grid block
# If Capman is going vertical, his yPos must be halfway through the grid block
CMPI %r4 $1
BEQ .VERTICALDOT
CMPI %r4 $4
BEQ .VERTICALDOT
CMPI %r4 $2
BEQ .HORIZONTALDOT
CMPI %r4 $3
BEQ .HORIZONTALDOT

.VERTICALDOT
MOV %r9 %r3 # r9 = Capman yPos
BUC .LOADPACDOTS

.HORIZONTALDOT
MOV %r9 %r2 # r9 = Capman xPos
BUC .LOADPACDOTS

.LOADPACDOTS
ANDI %r9 $8 # r9 = r9 & 000F
CMPI %r9 $8 
BNE .CHECKEDFORDOT # If Capman is not in the middle of a block, don't continue
MOVI %r9 $54 # r9 = 0036
LUI %r9 $28 # r9 = 1C36
LOAD %r10 %r9 # Load memory at r9(1C36) into r10 (number of pacdots)
JPT %r15 .GETSPRITEID # r15 = .GETSPRITEID address
JAL %r0 %r15 # CALL .GETSPRITEID (Returns %r13 as sprite ID, %r14 as sprite ID address)
CMPI %r13 $1
BNE .CHECKEDFORDOT # Branches if block on grid isn't a pacdot
MOVI %r13 $0 # r13 = 0
STOR %r13 %r14 # Store r13(0) into the address in r14 (sprite ID address)
SUBI %r10 $1 # r10 -= 1
STOR %r10 %r9 # Decrement pacdot count in memory
.CHECKEDFORDOT
# Return address was overwritten, get it back from memory
MOVI %r14 $-1 # r14 = 00FF
LUI %r14 $15 # r14 = 0FFF
LOAD %r0 %r14 # Load last return address from memory
JUC %r0
####################################################################################
# This function will load a sprite ID based on %r11 and %r12
#
# RETURNS
# %r13 - Sprite ID at (%r11, %r12)
# %r14 - Sprite ID address
.GETSPRITEID
# Loads r13 from [1000 + xPosOnGrid + (40*yPosOnGrid)]
MOVI %r14 $0 # r14 = 0000
LUI %r14 $16 # r14 = 1000
ADD %r14 %r11 # r14 += xPosOnGrid (1000 + xPosOnGrid)
MOVI %r15 $40 # r15 = 40
MUL %r15 %r12 # r15 *= yPosOnGrid
ADD %r14 %r15 # r14 += r15 (1000 + xPosOnGrid + (40*yPosOnGrid))
LOAD %r13 %r14 # Load memory at %r14 into %r13 (Sprite ID)
JUC %r0
####################################################################################
# This function will check for a ghost collision
# If a collision occurs, sets Capman's alive state to 0
.CHECKGHOSTCOLLISION
JUC %r0
####################################################################################
# This function will store this drawing information:
# Capman xPos, yPos, Direction
# Ghost xPos, yPos, Direction
# Capman State (Alive or Dead)
#
# RETURNS
# %r15 as CC35
.STOREDRAWINGINFORMATION
MOVI %r15 $48 # r15 = 0030
LUI %r15 $28 # r15 = 1C30
STOR %r2 %r15 # Store xPos(320) into r15(1C30)
ADDI %r15 $1 # r15 = 1C31
STOR %r3 %r15 # Store yPos(368) into r15(1C31)

# Capman's direction is the sprite ID
CMPI %r1 $0
BEQ .STORECAPMANDEAD
CMPI %r4 $1
BEQ .STORECAPMANDOWN
CMPI %r4 $2
BEQ .STORECAPMANRIGHT
CMPI %r4 $3
BEQ .STORECAPMANLEFT
CMPI %r4 $4
BEQ .STORECAPMANUP

.STORECAPMANDEAD
MOVI %r14 $22 # r14 = 22 (Capman Dead)
BUC .CONTINUESTORING

.STORECAPMANDOWN
MOVI %r14 $20 # r14 = 20 (Capman Open Down)
BUC .CONTINUESTORING

.STORECAPMANRIGHT
MOVI %r14 $16 # r14 = 16 (Capman Open Right)
BUC .CONTINUESTORING

.STORECAPMANLEFT
MOVI %r14 $14 # r14 = 14 (Capman Open Left)
BUC .CONTINUESTORING

.STORECAPMANUP
MOVI %r14 $18 # r14 = 18 (Capman Open Up)
BUC .CONTINUESTORING

.CONTINUESTORING
ADDI %r15 $1 # r15 = 1C32
STOR %r14 %r15 # Store Capman Direction (Sprite ID) into r15(1C32)
ADDI %r15 $1 # r15 = 1C33
STOR %r5 %r15 # Store xPosOnGhost(304) into r15(1C33)
ADDI %r15 $1 # r15 = 1C34
STOR %r6 %r15 # Store yPosOnGhost(16) into r15(1C34)

# The ghost's direction is the Sprite ID
CMPI %r4 $1
BEQ .STOREGHOSTDOWN
CMPI %r4 $2
BEQ .STOREGHOSTRIGHT
CMPI %r4 $3
BEQ .STOREGHOSTLEFT
CMPI %r4 $4
BEQ .STOREGHOSTUP

.STOREGHOSTDOWN
MOVI %r14 $27 # r14 = 27 (Ghost A Down)
BUC .CONTINUESTORINGAGAIN

.STOREGHOSTRIGHT
MOVI %r14 $25 # r14 = 25 (Ghost A Right)
BUC .CONTINUESTORINGAGAIN

.STOREGHOSTLEFT
MOVI %r14 $23 # r14 = 23 (Ghost A Left)
BUC .CONTINUESTORINGAGAIN

.STOREGHOSTUP
MOVI %r14 $29 # r14 = 29 (Ghost A Up)
BUC .CONTINUESTORINGAGAIN

.CONTINUESTORINGAGAIN
ADDI %r15 $1 # r15 = 1C35
STOR %r7 %r15 # Store Ghost Direction (Sprite ID) into r15(1C35)
JUC %r0
####################################################################################
# This function is called when the user either wins or loses, allows to play again
.ENDGAME
MOVI %r15 $-1 # r15 = 00FF
LUI %r15 $-1 # r15 = FFFF
.ENDLOOP
LOAD %r4 %r15 # Load user input into %r4
CMPI %r4 $-1
BNE .ENDLOOP # Branches if user does not press A (play again button)
BUC .ENDGAME