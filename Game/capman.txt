# Potential setup code
#########################################################################
# Start of program, sets up Capman game then proceeds with infinite loop
#
# %r1 - Capman State (1 is Capman is alive, 0 if Capman is dead)
# %r2 - Capman X Position (Cannot exceed 640)
# %r3 - Capman Y Position (Cannot exceed 480)
# %r4 - Capman Direction (0 = neutral, 1 = Down, 2 = Right, 3 = Left, 4 = Up, -1 = A)
# %r5 - Capman Position Jump (Determines speed, hardcoded to 1)
# %r6 - Ghost X Position (Cannot exceed 640)
# %r7 - Ghost Y Position (Cannot exceed 480)
# %r8 - Ghost Direction (0 = neutral, 1 = Down, 2 = Right, 3 = Left, 4 = Up, -1 = A)
# %r9 - Ghost Position Jump (Determines speed, hardcoded to 2)
.START # START OF GAME
MOVI %r1 $1 # r1 = 1 (alive)

# Capman starts at (300, 240) which is the top left of his sprite
MOVI %r2 $150 # r2 = 150
ASHUI %r2 $1 # r2 = 300 (Capman xPos)
MOVI %r3 $240 # r3 = 240 (Capman yPos)

MOVI %r4 $3 # r4 = Left (Capman Direction)
MOVI %r5 $1 # r5 = 1 (Capman Speed)

# Ghost starts at (320, 20) which is the top left of his sprite
MOVI %r6 $160 # r6 = 160
ASHUI %r6 $1 # r6 = 320 (Ghost xPos)
MOVI %r7 $20 # r7 = 20 (Ghost yPos)

MOVI %r8 $2 # r8 = Right (Ghost Direction)
MOVI %r9 $2 # r9 = 2 (Ghost Speed)
#######################################################################
# Infinite loop for game
#
# %r11 - xPosOnGrid
# %r12 - yPosOnGrid
.CHECKDIRECTION # Start of infinite loop for game, updates Capman based on direction pressed
MOV %r10 %r4 # r10 = r4 (store original direction)
MOVI %r15 $-1 # r15 = 00FF
LUI %r15 $-1 # r15 = FFFF
LOAD %r4 %r15 # Load user input into %r4
CMPI %r4 $0 
BGT $1 # If r4 is less than 0, execute next instruction which will keep capman going the same direction
MOV %r4 %r10 # r4 = r10 (original direction)
CMPI %r4 $1
BEQ .DOWN
CMPI %r4 $2
BEQ .RIGHT
CMPI %r4 $3
BEQ .LEFT
CMPI %r4 $4
BEQ .UP

.UPDATEGAME # Label for updating game

# Check for ghost collision
# Check for pacdot collision
# Update ghost position
CMPI %r1 $1
BEQ .CHECKDIRECTION
BUC .ENDGAME
###########################################################################
# Function for when the player holds the left direction
# Capman will go left only if there are no collisions present
# If Capman reaches the edge of the screen, he will come out the other end
.LEFT
SUB %r2 %r5 # xPos -= Speed
CMPI %r2 $0
BGE .LEFTCONVERSION # If xPos < 0, don't need to check for collision
MOVI %r15 $160 # %r15 = 160
ASHUI %r15 $2 # r15 = 640
ADD %r2 %r15 # xPos += 640
BUC .UPDATEGAME
.LEFTCONVERSION
MOVI %r15 .CONVERTCAPMAN # r15 = .CONVERTCAPMAN address
JAL %r0 %r15 # CALL .CONVERTCAPMAN
# Somehow check the grid position for collision
# IF COLLIDES 
ADD %r2 %r5 # Redo position update
BUC .UPDATEGAME
###############################################################################3
# Function for when the player holds the right direction
# Capman will go right only if there are no collisions present
# If Capman reaches the edge of the screen, he will come out the other end
.RIGHT
ADD %r2 %r5 # xPos += Speed
MOVI %r15 $160 # %r15 = 160
ASHUI %r15 $2 # r15 = 640
CMP %r2 %r15
BLT .RIGHTCONVERSION # If xPos >= 640, don't need to check for collision
SUB %r2 %r15 # xPos -= 640
BUC .UPDATEGAME
.RIGHTCONVERSION
MOVI %r15 .CONVERTCAPMAN # r15 = .CONVERTCAPMAN address
JAL %r0 %r15 # CALL .CONVERTCAPMAN
# Somehow check the grid position for collision
# IF COLLIDES 
SUB %r2 %r5 # Redo position update
BUC .UPDATEGAME
##################################################################################
# Function for when the player holds the up direction
# Capman will go up only if there are no collisions present
.UP
ADD %r3 %r5 # yPos += Speed
MOVI %r15 .CONVERTCAPMAN # r15 = .CONVERTCAPMAN address
JAL %r0 %r15 # CALL .CONVERTCAPMAN
# Somehow check the grid position for collision
# IF COLLIDES 
SUB %r3 %r5 # Redo position update
BUC .UPDATEGAME
################################################################################
# Function for when the player holds the down direction
# Capman will go down only if there are no collisions present
.DOWN
SUB %r3 %r5 # yPos -= Speed
MOVI %r15 .CONVERTCAPMAN # r15 = .CONVERTCAPMAN address
JAL %r0 %r15 # CALL .CONVERTCAPMAN
# Somehow check the grid position for collision
# IF COLLIDES 
ADD %r3 %r5 # Redo position update
BUC .UPDATEGAME
###################################################################################
# This function converts the xPos and yPos of Capman to positions on a 40x30 grid
# Will update %r11 and %r12 to the positions on the grid
.CONVERTCAPMAN
MOV %r11 %r2 # r11 = xPos
ASHUI %r11 $-4 # r11 /= 16
MOV %r12 %r3 # r12 = yPos
ASHUI %r12 $-4 # r12 /= 16
JUC %r0
#####################################################################################
# This function converts the xPos and yPos of the ghost to positions on a 40x30 grid
# Will update %r11 and %r12 to the positions on the grid
.CONVERTGHOST
MOV %r11 %r6 # r11 = xPosOnGhost
ASHUI %r11 $-4 # r11 /= 16
MOV %r12 %r7 # r12 = yPosOnGhost
ASHUI %r12 $-4 # r12 /= 16
JUC %r0
####################################################################################3
# This function is called when the user either wins or loses, allows to play again
.ENDGAME
# Get input from I/O, if it is start...
BUC .START